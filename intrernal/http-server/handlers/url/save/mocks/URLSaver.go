// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/babenow/url_shortener/intrernal/model"
	mock "github.com/stretchr/testify/mock"
)

// URLSaver is an autogenerated mock type for the URLSaver type
type URLSaver struct {
	mock.Mock
}

// GetURLByAlias provides a mock function with given fields: ctx, alias
func (_m *URLSaver) GetURLByAlias(ctx context.Context, alias string) (*model.Url, error) {
	ret := _m.Called(ctx, alias)

	var r0 *model.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Url, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Url); ok {
		r0 = rf(ctx, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *URLSaver) Save(_a0 context.Context, _a1 model.Url) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Url) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Url) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Url) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewURLSaver creates a new instance of URLSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLSaver {
	mock := &URLSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
